todd_generator := dim -> product(t*x[i]/(1-exp(t*x[i])), i=0..dim-1):
# Compute a Taylor series.  We need to go up to order 2*dim+1 because
# for Maple the x variables in the denominator of the coefficients also
# contribute to the order!
todd_series := dim -> taylor(todd_generator(dim), t=0, 2*dim+1):
emit_todd_code := proc(filename, maxdim)
  local fd, dim, k, seri, coef;
  fd := fopen(filename, WRITE, TEXT);
  fprintf(fd, "#include \"todd/todd.h\"\n");
  fprintf(fd, "#include \"todd/gmp_pow.h\"\n\n");
  fprintf(fd, "mpq_class todd(int dim, int k, const mpz_vector &x) {\n");
  fprintf(fd, "switch (dim) {\n");
  for dim from 1 to maxdim do
    fprintf(fd, "case %d:\n", dim);
    seri := simplify(todd_series(dim));
    fprintf(fd, "switch (k) {\n");
    for k from 0 to dim do
      fprintf(fd, "case %d:\n", k);
      coef := convert(coeff(seri, t, k), horner);
      fprintf(fd, "return %a;\n", coef);
    end do;
    fprintf(fd, "default:\nabort();\n");
    fprintf(fd, "}\n");
  end do;
  fprintf(fd, "default:\nabort();\n");
  fprintf(fd, "}\n");
  fprintf(fd, "}\n");
  fclose(fd);
end proc:
emit_todd_code("todd.pre-cpp", 5);

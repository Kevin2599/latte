read("weightedCountingBox.mpl");


toMapleFromLatte:=proc(pxList)

	px:=0;
	for m in pxList do:
		oneTerm:=m[1];
		for i from 1 to nops(m[2]) do:
			oneTerm:= oneTerm* x[i]^(m[2][i]);
		od;
		
		px:= px + oneTerm;
	od;
	
	return px;
end:


testRandomForm:=proc(dim)

	randomize();
	r:=rand(-10..10):
	
	u:=[]:
	l:=[]:
	linForm:=[]:
	for i from 1 to dim do:
		x:=r():
		l:=[x, op(l)]:
		u:=[x+rand(10)()+1, op(u)]:
		linForm:=[(rand(10)()+1)*(-1)^(rand(0..1)()), op(linForm)]:
	end;

	linForm[rand(1..dim)()] := 0;
	linForm[rand(1..dim)()] := 0;

	fptr:=fopen("boxTesting.box", WRITE, TEXT);
	fprintf(fptr, "%d\n", dim);
	for i from 1 to dim do:
		fprintf(fptr, "%d %d\n", l[i], u[i]);
	end;
	fclose(fptr);
		
	fptr:=fopen("boxTesting.linForms", WRITE, TEXT);

	c:=rand(3)()+1;
	M:=rand(10)();
	fprintf(fptr, "[[%d, [%d, [", c, M);
	for i from 1 to dim do
		fprintf(fptr, "%d", linForm[i]);
		if i <> dim then
			fprintf(fptr, ",");
		end;
	end;
	fprintf(fptr,"]]] ]\n");
	fclose(fptr);


	
	system("../boxOpt --count --boxFile=boxTesting.box --linear-forms=boxTesting.linForms");
	#system("./boxOpt boxTesting.hrep --linFile=boxTesting.linForms");
	print("Just called latte");
	cans:=weightedBoxCount(l, u, c, linForm, M):
	printf("Final count: %d\n", cans);
	

end:



testRandPolynomial:=proc(dim)


	randomize();
	r:=rand(-10..10):
	
	u:=[]:
	l:=[]:
	pxList:=[]:
	for i from 1 to dim do:
		x:=r():
		l:=[x, op(l)]:
		u:=[x+rand(10)()+1, op(u)]:
	end;
	x:='x';


	fptr:=fopen("boxTesting.box", WRITE, TEXT);
	fprintf(fptr, "%d\n", dim);
	for i from 1 to dim do:
		fprintf(fptr, "%d %d\n", l[i], u[i]);
	end;
	fclose(fptr);

	for j from 1 to 1 do:
		oneTerm:=[];
		for i from 1 to dim do:
			oneTerm:=[rand(0..2)(), op(oneTerm)]:
		end;
		pxList:= [[rand(1..5)(), oneTerm], op(pxList)];
	od;

	

	fptr:=fopen("boxTesting.poly", WRITE, TEXT);
	px:=toMapleFromLatte(pxList);
	fprintf(fptr,"%a\n", pxList);
	fclose(fptr);
	
	print(pxList);
	print(px);
	
	system("../boxOpt --count --boxFile=boxTesting.box --monomials=boxTesting.poly --k 1");
	print("Just called latte");
	cans:=weightedBoxCountExpression(l, u, px^1):
	printf("Final count: %d  (maple)\n", cans);	
	

end:


#weightedBoxCount([4, 10], [5, 13], 1, [1,2], 10);
#testRandomForm(5);
#testRandPolynomial(5);


fx:=x[1]*x[2]^2*x[3] - x[1]*x[2]*x[3] -x[1]*x[3]^2 -5*x[1];

print("number of terms in expanded form", nops(expand((fx+s)^40)));
[[1,[1,2,1]], [-1,[1,1,1]], [-1,[1,0,2]], [-5,[1,0,0]]];

a:=weightedBoxCountExpression([1,-5,-10], [3,-2,14], (fx + s)^40);


b:=( +2429717162666064393145213476885100180742453144408649199183773642891222693640078585356225602433396176006565351912665950169960*(s^0) -80054460153765508761854934111365164422810272734703075340796559981551857885967699953868133088855512992967081798368343376000*(s^1) +1285991397142331684972795821030735876805229093089629444825504603644197742243032512372540280874806859856252686964937349600*(s^2) -13420639085861105697831870434680569763465969758308098289172911852802824213946498731590979860715612305469108793539088000*(s^3) +102294045978693176746335871670142444483941717721151682944257609002450665382381412325617070637541097411279160158180400*(s^4) -607001564041553973195169071278966722360919705011606950553375537727353477463325864586489415839539351432727790448000*(s^5) +2918739335401410223796207503640555531937148182347919311894460938023720154883155235052978951149079152498991077600*(s^6) -11688489386996889129748697293914702961497626771275347639801809192987076324664413168623680733635078200715824000*(s^7) +39762306635476885994619381328103089951008521246012554505304825026585402722730232600121912289482646476950600*(s^8) -116624796961126815382430370431915367658700161598884590000955637119281972963689300358505736755658188608000*(s^9) +298335672166718389789046916979657738105422166475884686171917138849269538115684352624215553319723212160*(s^10) -671657655116330962967028005832609698974983998440687876035189300022734920789409528573840215012928000*(s^11) +1340494538600707184848897396056073522228866656009209339198877496615540861317002491711593368116800*(s^12) -2385582376279402364125120136059103890685404121794488022392834383112814213625970371300581056000*(s^13) +3803583430163051043799361605925187390371442415005378447896602566859550159564405017715452800*(s^14) -5454117177906282130947064696798492199776317051642857064735820362623494264631537027520000*(s^15) +7055509561205750327684098988671833505595568813899126650762470122016794189109740274000*(s^16) -8253947394147140709640825941730118279959883974524862594473107643288586140582240000*(s^17) +8748752683105466547947983559525289117128806346698717502301059725670976291816000*(s^18) -8413426946273618762566280185084052938555790683549211708859399970799793120000*(s^19) +7347887347643263587079572198521458297435264739794330228383271662058087200*(s^20) -5830449521375567868680383805700949057527104895044155927857778352160000*(s^21) +4204332531275848636698640901243516105861669709579883028530665576000*(s^22) -2753656216510535055131015742367664135218460707114755211666080000*(s^23) +1637798842014561679226708188368464333412346564259029702194000*(s^24) -882863793690119859525468995921015617869693907581447744000*(s^25) +431438995602789887721480052132647133526535737169916800*(s^26) -190175930633348121384968619511352853502027774272000*(s^27) +75888837002892986712905511199143498018409524800*(s^28) -27044692599026518578185917180324740940224000*(s^29) +8754710414371574674289983095450970060160*(s^30) -2472475813145003806710637538218176000*(s^31) +648764114564547073260849495414600*(s^32) -139624542032171432441663952000*(s^33) +30375870766296229818789600*(s^34) -4577983008400153872000*(s^35) +900210407819668400*(s^36) -79381480464000*(s^37) +17696733600*(s^38) -648000*(s^39) +300*(s^40))
;

a-b;


polynomialStats([1,-5,-10], [3,-2,14], (fx + 0)^1);

maxValueExpression([1,-5,-10], [3,-2,14], (fx + 0)^1);


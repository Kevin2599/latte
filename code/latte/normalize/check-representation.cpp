/* check-representation.cpp -- Check whether a vector is generated by given generators
	       
   Copyright 2007 Matthias Koeppe

   This file is part of LattE.
   
   LattE is free software; you can redistribute it and/or modify it
   under the terms of the version 2 of the GNU General Public License
   as published by the Free Software Foundation.

   LattE is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with LattE; if not, write to the Free Software Foundation,
   Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
*/

#include <cstdlib>
#include <cassert>
#include <string>
#include <iostream>
#include <fstream>

#include <cplex.h>

using namespace std;

int verbose = false;

static void usage()
{
  cerr << "usage: check-reprentation VECTORS GENERATORS" << endl;
}

void
open_matrix_file(const string &filename, ifstream &file,
		 int &num, int &dim)
{
  file.open(filename.c_str());
  if (!file.good()) {
    cerr << "Failed to open " << filename << endl;
    exit(1);
  }
  file >> num >> dim;
  if (!file.good()) {
    cerr << "Parse error reading file " << filename << endl;
    exit(1);
  }
}

int main(int argc, char **argv)
{
  if (argc != 3) {
    usage();
    exit(1);
  }
  string vectors_filename(argv[1]);
  string generators_filename(argv[2]);
  int num_vectors, dim_vectors;
  ifstream vectors_file;
  open_matrix_file(vectors_filename, vectors_file, num_vectors, dim_vectors);
  int num_generators, dim_generators;
  ifstream generators_file;
  open_matrix_file(generators_filename, generators_file, num_generators, dim_generators);
  assert(dim_vectors == dim_generators);
  int dim = dim_vectors;

  int status;
  CPXENVptr env = CPXopenCPLEX(&status);
  if (status != 0) {
    cerr << "Failed to obtain CPLEX environent." << endl;
    abort();
  }

  CPXLPptr lp = CPXcreateprob(env, &status, "repr");
  if (status != 0) abort();
  
  status = CPXnewrows(env, lp, dim, /*rhs:*/ NULL, /*sense:*/ NULL,
		      /*rngval:*/ NULL, /*rownames:*/ NULL);
  if (status != 0) abort();

  status = CPXnewcols(env, lp, num_generators, /*obj:*/ NULL,
		      /*lb:*/ NULL, /*ub:*/ NULL,
		      /*ctype:*/ NULL, /*colname:*/NULL);
  if (status != 0) abort();
  
  int i;
  for (i = 0; i<num_generators; i++) {
    status = CPXchgcoef(env, lp, -1, i, 1.0);
    if (status != 0) abort();
    int j;
    for (j = 0; j<dim; j++) {
      double x;
      generators_file >> x;
      status = CPXchgcoef(env, lp, j, i, x);
      if (status != 0) abort();
      
    }
    if (!generators_file.good()) {
      cerr << "Parse error reading generator file" << endl;
      exit(1);
    }
  }

  double *multipliers = new double[num_generators];

  cout << "Checking that all vectors are in the cone." << endl;
  for (i = 0; i<num_vectors; i++) {
    if (i % 1000 == 0) {
      cout << i << "/" << num_vectors << " done. " << endl;
    }
    if (verbose)
      cout << "Checking vector: ";
    int j;
    for (j = 0; j<dim; j++) {
      double x;
      vectors_file >> x;
      if (verbose)
	cout << x << " ";
      status = CPXchgcoef(env, lp, j, -1, x);
      if (status != 0) abort();
    }
    if (!vectors_file.good()) {
      cerr << "Parse error reading vectors file" << endl;
      exit(1);
    }
    if (verbose)
      cout << endl;

    status = CPXdualopt(env, lp);
    if (status != 0) abort();

    int lpstat = CPXgetstat(env, lp);
    if (lpstat != CPX_STAT_OPTIMAL) {
      cerr << "LP solution status code: " << lpstat << endl;
      cout << "LP written out as repr.lp" << endl;
      status = CPXwriteprob(env, lp, "repr.lp", "LP");
      if (status != 0) abort();
    }
    else {
      if (verbose) {
	cout << "CPLEX says: Vector lies in cone." << endl
	     << "Multipliers: ";
	status = CPXgetx(env, lp, multipliers, 0, num_generators - 1);
	if (status != 0) abort();
	
	for (j = 0; j<num_generators; j++)
	  cout << multipliers[j] << " ";
	cout << endl;
      }
    }
  }
  status = CPXfreeprob(env, &lp);
  if (status != 0) abort();
  status = CPXcloseCPLEX(&env);
  if (status != 0) abort();
}
